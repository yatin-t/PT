"""
Django settings for Project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY WARNING: keep the secret key used in production secret!
# Read secret key from environment for production safety. A fallback is kept for local dev only.
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY',
    'django-insecure-xczh&7==sc^j0s!ei-bs-2c(l25381l3*r@%_8*20=1z(^rr46'
)

# SECURITY WARNING: don't run with debug turned on in production!
# Set DJANGO_DEBUG to 'True' or 'False' in environment. Default to False for safer defaults.
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

# ALLOWED_HOSTS can be provided as a comma-separated env var (e.g. "example.com,api.example.com")
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [h.strip() for h in ALLOWED_HOSTS.split(',') if h.strip()] if ALLOWED_HOSTS else []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Myapp',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use DATABASE_URL in production (e.g. provided by Render). Fall back to SQLite for local dev.
import dj_database_url

DATABASES = {
    'default': dj_database_url.config(
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}'
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
# Static files (for production)
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Use WhiteNoise's compressed manifest storage to serve static files efficiently
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
from django.contrib.messages import constants as messages

MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Email configuration (DISABLED - email notifications are turned off)
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'
# DEFAULT_FROM_EMAIL = 'cloudED <your-email@gmail.com>'

# For development, you can use console backend to see emails in console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Allowed file types
ALLOWED_FILE_TYPES = [
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'text/plain',
]

# Maximum file size (50MB)
MAX_FILE_SIZE = 50 * 1024 * 1024

# Make sure your INSTALLED_APPS includes your app
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    
    # Cloudinary apps (MUST be BEFORE staticfiles)
    'cloudinary_storage',
    'cloudinary',
    
    'django.contrib.staticfiles',
    'Myapp',  # Make sure this matches your app name exactly
    # Third-party apps for API
    'rest_framework',
    'corsheaders',
]

# Add this line back if using Solution 2
#AUTH_USER_MODEL = 'Myapp.User'  # Now this will work because we have a User model

# Rest of your settings...

# Django REST Framework default settings (keep minimal)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# CORS - allow local React dev server during development (change for production)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
    # Vite sometimes uses port 5174; include it for local development
    'http://localhost:5174',
    'http://127.0.0.1:5174',
]

# Allow cookies to be sent cross-site if using session authentication from the frontend
CORS_ALLOW_CREDENTIALS = True

# Add production frontend origin if provided in env (e.g. https://your-site.vercel.app)
frontend_origin = os.environ.get('FRONTEND_URL')
if frontend_origin:
    CORS_ALLOWED_ORIGINS.append(frontend_origin)

# ============================================
# CLOUDINARY CLOUD STORAGE CONFIGURATION
# ============================================
# 
# IMPORTANT: Replace these placeholder values with YOUR actual Cloudinary credentials!
# Get them from: https://cloudinary.com/console
# 
# Your credentials look like:
#   Cloud Name: dxxxxxxxxx (a string starting with 'd')
#   API Key: 123456789012345 (15-digit number)
#   API Secret: abcdefg_1234567890ABCDEFG (alphanumeric string)
#
CLOUDINARY_STORAGE = {
    # Read Cloudinary credentials from environment variables in production.
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME', ''),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY', ''),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET', ''),
}

# Use Cloudinary for file storage (files will be uploaded to Cloudinary)
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Optional: Cloudinary URL will be used for serving files
# CLOUDINARY_URL is automatically constructed from the above settings
# Your uploaded files will be accessible at: https://res.cloudinary.com/your-cloud-name/...
