name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ci_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/ci_test
      DJANGO_SECRET_KEY: ci-secret
      DJANGO_DEBUG: 'False'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..10}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres && break || sleep 2
          done

      - name: Run migrations
        run: |
          python manage.py migrate --noinput

      - name: Django check
        run: |
          python manage.py check

      - name: Run tests (if any)
        run: |
          if [ -f pytest.ini ] || [ -d tests ] ; then
            pip install pytest
            pytest -q
          else
            echo "No tests found, skipping pytest"
          fi

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trigger Render deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
            echo "Missing Render secrets; skipping deploy";
            exit 1;
          fi
          echo "Triggering deploy for service $RENDER_SERVICE_ID"
          resp=$(curl -s -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache":false}')
          echo "Render response: $resp"
          deploy_id=$(echo "$resp" | jq -r '.id')
          if [ "$deploy_id" = "null" ] || [ -z "$deploy_id" ]; then
            echo "Failed to start Render deploy";
            exit 1;
          fi
          echo "Started deploy: $deploy_id"
          # Optional: poll deploy status (timeout 600s)
          for i in {1..60}; do
            status=$(curl -s -H "Authorization: Bearer ${RENDER_API_KEY}" "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/${deploy_id}" | jq -r '.status')
            echo "Deploy status: $status"
            if [ "$status" = "success" ]; then
              echo "Deploy successful";
              exit 0;
            fi
            if [ "$status" = "failed" ]; then
              echo "Deploy failed";
              exit 1;
            fi
            sleep 10
          done
          echo "Deploy polling timed out";
          exit 1

  deploy-frontend:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm ci

      - name: Build frontend
        working-directory: frontend
        run: |
          npm run build

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: frontend
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "Missing VERCEL_TOKEN secret; skipping frontend deploy";
            exit 1;
          fi
          # Deploy with Vercel CLI using token. Provide project/org ids if you want to pin the deployment.
          npx vercel --prod --token "$VERCEL_TOKEN" --confirm || (echo "Vercel deploy failed" && exit 1)
